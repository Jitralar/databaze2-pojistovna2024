-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2024-12-03 17:49:09 SEÈ
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adresa (
    id_adresa        NUMBER NOT NULL,
    ulice            VARCHAR2(32) NOT NULL,
    cislo_orientacni VARCHAR2(32),
    cislo_popisne    VARCHAR2(32) NOT NULL,
    mesto            VARCHAR2(32) NOT NULL,
    psc              CHAR(5) NOT NULL,
    patro            NUMBER,
    kraj_id_kraj     NUMBER
);

ALTER TABLE adresa ADD CONSTRAINT adresa_pk PRIMARY KEY ( id_adresa );

CREATE TABLE banka (
    id_banka           NUMBER NOT NULL,
    nazev              VARCHAR2(32) NOT NULL,
    adresa_id_adresa   NUMBER NOT NULL,
    kontakt_id_kontakt NUMBER,
    telefon            CHAR(9),
    klient_id_klient   NUMBER
);

ALTER TABLE banka ADD CONSTRAINT banka_pk PRIMARY KEY ( id_banka );

CREATE TABLE fotodokumentace (
    id_fotodokumentace        NUMBER NOT NULL,
    pojistka_poj_id_pojisteni NUMBER NOT NULL,
    soubor                    BLOB NOT NULL,
    nazev_souboru             VARCHAR2(255),
    typ_souboru               VARCHAR2(50),
    pripojena_datum           DATE,
    modifikovana_datum        DATE,
    operace                   VARCHAR2(50),
    uzivatel                  VARCHAR2(255)
);

ALTER TABLE fotodokumentace ADD CONSTRAINT fotodokumentace_pk PRIMARY KEY ( id_fotodokumentace,
                                                                            pojistka_poj_id_pojisteni );

CREATE TABLE kategorie_majetek (
    id_kategorie_majetku NUMBER NOT NULL,
    nazev_kategorie      VARCHAR2(255) NOT NULL
);

ALTER TABLE kategorie_majetek ADD CONSTRAINT kategorie_majetek_pk PRIMARY KEY ( id_kategorie_majetku );

CREATE TABLE klient (
    id_klient          NUMBER NOT NULL,
    jmeno              VARCHAR2(32) NOT NULL,
    druhe_jmeno        VARCHAR2(32),
    prijmeni           VARCHAR2(32) NOT NULL,
    datum_narozeni     DATE NOT NULL,
    prijem             NUMBER NOT NULL,
    adresa_id_adresa   NUMBER,
    kontakt_id_kontakt NUMBER,
    banka_id_banka     NUMBER,
    id_kontakt         NUMBER
);

ALTER TABLE klient ADD CONSTRAINT klient_pk PRIMARY KEY ( id_klient );

CREATE TABLE kontakt (
    id_kontakt NUMBER NOT NULL,
    telefon    CHAR(9),
    mobil      CHAR(9),
    email      VARCHAR2(325)
);

COMMENT ON COLUMN kontakt.email IS
    'According to email standards (RFC 5321 and RFC 5322), the maximum length of an email address is 320 characters, combining the local and domain parts. Longer email addresses may not be accepted by some email systems.

325 je save messure';

ALTER TABLE kontakt ADD CONSTRAINT kontakt_pk PRIMARY KEY ( id_kontakt );

CREATE TABLE kraj (
    id_kraj       NUMBER NOT NULL,
    nazev_kraje   VARCHAR2(255) NOT NULL,
    krajske_mesto VARCHAR2(255) NOT NULL
);

ALTER TABLE kraj ADD CONSTRAINT kraj_pk PRIMARY KEY ( id_kraj );

CREATE TABLE majetkove_pojisteni (
    id_poj_pojisteni    NUMBER NOT NULL,
    maj_id_majetek      NUMBER NOT NULL,
    maj_popis           VARCHAR2(255) NOT NULL,
    maj_vyrobeno_v_roce DATE,
    kat_maj_id_kat_maj  NUMBER
);

COMMENT ON COLUMN majetkove_pojisteni.kat_maj_id_kat_maj IS
    'KATEGORIE_MAJETEK_ID_kategorie_majetku';

ALTER TABLE majetkove_pojisteni ADD CONSTRAINT majetkove_pojisteni_pk PRIMARY KEY ( id_poj_pojisteni );

ALTER TABLE majetkove_pojisteni ADD CONSTRAINT majetkove_pojisteni_pkv2 UNIQUE ( maj_id_majetek );

CREATE TABLE permise (
    id_permise         NUMBER NOT NULL,
    nazev_permise      VARCHAR2(255) NOT NULL,
    popis_permise      VARCHAR2(4000),
    kontakt_id_kontakt NUMBER NOT NULL
);

COMMENT ON COLUMN permise.id_permise IS
    '1 = Neregistrovany uzivatel (klient), Muze vyplnit zakladni udaje o sobe a tim si vytvorit ucet v aplikaci 

     2 = Registrovany uzivatel (klient), Ma prideleneho zamestnance, ktery se o nej stara. Muze prohlizet sve pojistky.

     3 = Zamestnanec, Spravuje obsah pojistek. Muze si prepinat mezi svymi klienty a spravuje jodnotlive pojistky.

     4 = Analytik, Muze sledovat anonymizovane statistiky a vystupy ze systemu.

     5= Supervisor, Ma prava vsech roli (2 - 5). Prideluje jednotlive zamestnance ke klientum.

     6 = Admin,  Muze modifikovat obsah vsech tabulek (vcetne ciselniku), muze sledovat logy v aplikaci a ma funkce Analytika

ROLE URCUJI FUNKCIONALITU V DATABAZOVE APLIKACI A JAKY OBSAH SE JIM ZOBRAZI';

COMMENT ON COLUMN permise.kontakt_id_kontakt IS
    'tady se spojuje s kontaktem.';

ALTER TABLE permise ADD CONSTRAINT permise_pk PRIMARY KEY ( id_permise );

CREATE TABLE pobocka (
    id_pobocka        NUMBER NOT NULL,
    pocet_zamestnancu NUMBER,
    nazev             VARCHAR2(32) NOT NULL,
    adresa_id_adresa  NUMBER
);

ALTER TABLE pobocka ADD CONSTRAINT pobocka_pk PRIMARY KEY ( id_pobocka );

CREATE TABLE pohledavka (
    id_pov_povinosti  NUMBER NOT NULL,
    poh_id_pohledavka NUMBER NOT NULL,
    poh_popis         VARCHAR2(255)
);

ALTER TABLE pohledavka ADD CONSTRAINT pohledavka_pk PRIMARY KEY ( id_pov_povinosti );

ALTER TABLE pohledavka ADD CONSTRAINT pohledavka_pkv1 UNIQUE ( poh_id_pohledavka );

CREATE TABLE pojistka (
    poj_id_pojisteni           NUMBER NOT NULL,
    poj_datum_sjednani         DATE NOT NULL,
    poj_poznamka               VARCHAR2(255),
    poj_pojisteno_do_hodnoty   VARCHAR2(4000),
    poj_cena_mesicne           VARCHAR2(4000),
    povinosti_pov_id_povinosti NUMBER NOT NULL,
    poj_id_arc                 CHAR(1) NOT NULL
);

ALTER TABLE pojistka ADD CONSTRAINT pojistka_pk PRIMARY KEY ( poj_id_pojisteni );

CREATE TABLE pojistka_klient (
    poj_id_pojisteni NUMBER NOT NULL,
    kli_id_klient    NUMBER NOT NULL,
    id_st_poj_kli    NUMBER NOT NULL
);

ALTER TABLE pojistka_klient
    ADD CONSTRAINT pojistka_klient_pk PRIMARY KEY ( poj_id_pojisteni,
                                                    kli_id_klient,
                                                    id_st_poj_kli );

CREATE TABLE povinosti (
    pov_id_povinosti     NUMBER NOT NULL,
    pov_datum_vytvoreni  DATE NOT NULL,
    pov_datum_zplatnosti DATE,
    pov_id_arc           CHAR(1) NOT NULL
);

ALTER TABLE povinosti ADD CONSTRAINT povinosti_pk PRIMARY KEY ( pov_id_povinosti );

CREATE TABLE pozice (
    id_pozice NUMBER NOT NULL,
    nazev     VARCHAR2(32) NOT NULL,
    popis     VARCHAR2(255),
    plat      NUMBER NOT NULL
);

ALTER TABLE pozice ADD CONSTRAINT pozice_pk PRIMARY KEY ( id_pozice );

CREATE TABLE pripojisteni (
    id_poj_pojisteni           NUMBER NOT NULL,
    pri_id_pripojisteni        NUMBER NOT NULL,
    pri_druh                   VARCHAR2(255),
    pri_plati_pouze_ve_statech VARCHAR2(255),
    pri_cena_pripojisteni      VARCHAR2(4000) NOT NULL
);

ALTER TABLE pripojisteni ADD CONSTRAINT pripojisteni_pk PRIMARY KEY ( id_poj_pojisteni );

ALTER TABLE pripojisteni ADD CONSTRAINT pripojisteni_pkv1 UNIQUE ( pri_id_pripojisteni );

CREATE TABLE secret (
    id_secret          NUMBER NOT NULL,
    kontakt_id_kontakt NUMBER NOT NULL,
    token              VARCHAR2(255),
    password           VARCHAR2(4000) NOT NULL
);

COMMENT ON COLUMN secret.token IS
    'token is used for store 2fa connection string, dont forget to hash';

CREATE UNIQUE INDEX secret__idx ON
    secret (
        kontakt_id_kontakt
    ASC );

ALTER TABLE secret ADD CONSTRAINT secret_pk PRIMARY KEY ( id_secret );

CREATE TABLE urazove_pojisteni (
    id_poj_pojisteni   NUMBER NOT NULL,
    ura_id_uraz        NUMBER NOT NULL,
    ura_druh_urazu     VARCHAR2(255),
    ura_datum_narozeni DATE,
    ura_alergie        VARCHAR2(255)
);

ALTER TABLE urazove_pojisteni ADD CONSTRAINT urazove_pojisteni_pk PRIMARY KEY ( id_poj_pojisteni );

ALTER TABLE urazove_pojisteni ADD CONSTRAINT urazove_pojisteni_pkv1 UNIQUE ( ura_id_uraz );

CREATE TABLE zamestnanec (
    id_zam             NUMBER NOT NULL,
    jmeno              VARCHAR2(32) NOT NULL,
    druhe_jmeno        VARCHAR2(32),
    prijmeni           VARCHAR2(32) NOT NULL,
    adresa_id_adresa   NUMBER,
    pozice_id_pozice   NUMBER NOT NULL,
    kontakt_id_kontakt NUMBER,
    zamestnanec_id_zam NUMBER
);

COMMENT ON COLUMN zamestnanec.zamestnanec_id_zam IS
    'nadrizeny - hierchaicka struktora o tom, kdo komu sefuje';

CREATE UNIQUE INDEX zamestnanec__idx ON
    zamestnanec (
        zamestnanec_id_zam
    ASC );

ALTER TABLE zamestnanec ADD CONSTRAINT zamestnanec_pk PRIMARY KEY ( id_zam );

CREATE TABLE zamestnanec_pobocka (
    zam_id_zam     NUMBER NOT NULL,
    pob_id_pobocka NUMBER NOT NULL,
    id_st_zam_pob  NUMBER NOT NULL
);

ALTER TABLE zamestnanec_pobocka
    ADD CONSTRAINT zamestnanec_pobocka_pk PRIMARY KEY ( zam_id_zam,
                                                        pob_id_pobocka,
                                                        id_st_zam_pob );

CREATE TABLE zamestnanec_pojistka (
    zam_id_zam       NUMBER NOT NULL,
    poj_id_pojisteni NUMBER NOT NULL,
    id_st_zam_poj    NUMBER NOT NULL
);

ALTER TABLE zamestnanec_pojistka
    ADD CONSTRAINT zamestnanec_pojistka_pk PRIMARY KEY ( zam_id_zam,
                                                         poj_id_pojisteni,
                                                         id_st_zam_poj );

CREATE TABLE zavazek (
    id_pov_povinosti NUMBER NOT NULL,
    zav_id_zavazek   NUMBER NOT NULL,
    zav_popis        VARCHAR2(255) NOT NULL
);

ALTER TABLE zavazek ADD CONSTRAINT zavazek_pk PRIMARY KEY ( id_pov_povinosti );

ALTER TABLE zavazek ADD CONSTRAINT zavazek_pkv1 UNIQUE ( zav_id_zavazek );

ALTER TABLE adresa
    ADD CONSTRAINT adresa_kraj_fk FOREIGN KEY ( kraj_id_kraj )
        REFERENCES kraj ( id_kraj );

ALTER TABLE banka
    ADD CONSTRAINT banka_adresa_fk FOREIGN KEY ( adresa_id_adresa )
        REFERENCES adresa ( id_adresa );

ALTER TABLE banka
    ADD CONSTRAINT banka_klient_fk FOREIGN KEY ( klient_id_klient )
        REFERENCES klient ( id_klient );

ALTER TABLE banka
    ADD CONSTRAINT banka_kontakt_fk FOREIGN KEY ( kontakt_id_kontakt )
        REFERENCES kontakt ( id_kontakt );

ALTER TABLE fotodokumentace
    ADD CONSTRAINT fotodokumentace_pojistka_fk FOREIGN KEY ( pojistka_poj_id_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE klient
    ADD CONSTRAINT kli_banka_fk FOREIGN KEY ( banka_id_banka )
        REFERENCES banka ( id_banka );

ALTER TABLE klient
    ADD CONSTRAINT klient_adresa_fk FOREIGN KEY ( adresa_id_adresa )
        REFERENCES adresa ( id_adresa );

ALTER TABLE klient
    ADD CONSTRAINT klient_kontakt_fk FOREIGN KEY ( kontakt_id_kontakt )
        REFERENCES kontakt ( id_kontakt );

ALTER TABLE majetkove_pojisteni
    ADD CONSTRAINT maj_poj_kat_maj_fk FOREIGN KEY ( kat_maj_id_kat_maj )
        REFERENCES kategorie_majetek ( id_kategorie_majetku );

ALTER TABLE majetkove_pojisteni
    ADD CONSTRAINT maj_poj_pojistka_fk FOREIGN KEY ( id_poj_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE permise
    ADD CONSTRAINT permise_kontakt_fk FOREIGN KEY ( kontakt_id_kontakt )
        REFERENCES kontakt ( id_kontakt );

ALTER TABLE pobocka
    ADD CONSTRAINT pobocka_adresa_fk FOREIGN KEY ( adresa_id_adresa )
        REFERENCES adresa ( id_adresa );

ALTER TABLE pohledavka
    ADD CONSTRAINT poh_povinosti_fk FOREIGN KEY ( id_pov_povinosti )
        REFERENCES povinosti ( pov_id_povinosti );

ALTER TABLE pojistka_klient
    ADD CONSTRAINT poj_kli_klient_fk FOREIGN KEY ( kli_id_klient )
        REFERENCES klient ( id_klient );

ALTER TABLE pojistka_klient
    ADD CONSTRAINT poj_kli_pojistka_fk FOREIGN KEY ( poj_id_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE pojistka
    ADD CONSTRAINT pojistka_povinosti_fk FOREIGN KEY ( povinosti_pov_id_povinosti )
        REFERENCES povinosti ( pov_id_povinosti );

ALTER TABLE pripojisteni
    ADD CONSTRAINT pri_pojistka_fk FOREIGN KEY ( id_poj_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE secret
    ADD CONSTRAINT secret_kontakt_fk FOREIGN KEY ( kontakt_id_kontakt )
        REFERENCES kontakt ( id_kontakt );

ALTER TABLE urazove_pojisteni
    ADD CONSTRAINT ura_poj_pojistka_fk FOREIGN KEY ( id_poj_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE zamestnanec_pobocka
    ADD CONSTRAINT zam_pob_pobocka_fk FOREIGN KEY ( pob_id_pobocka )
        REFERENCES pobocka ( id_pobocka );

ALTER TABLE zamestnanec_pobocka
    ADD CONSTRAINT zam_pob_zamestnanec_fk FOREIGN KEY ( zam_id_zam )
        REFERENCES zamestnanec ( id_zam );

ALTER TABLE zamestnanec_pojistka
    ADD CONSTRAINT zam_poj_pojistka_fk FOREIGN KEY ( poj_id_pojisteni )
        REFERENCES pojistka ( poj_id_pojisteni );

ALTER TABLE zamestnanec_pojistka
    ADD CONSTRAINT zam_poj_zamestnanec_fk FOREIGN KEY ( zam_id_zam )
        REFERENCES zamestnanec ( id_zam );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_adresa_fk FOREIGN KEY ( adresa_id_adresa )
        REFERENCES adresa ( id_adresa );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_kontakt_fk FOREIGN KEY ( kontakt_id_kontakt )
        REFERENCES kontakt ( id_kontakt );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_pozice_fk FOREIGN KEY ( pozice_id_pozice )
        REFERENCES pozice ( id_pozice );

ALTER TABLE zamestnanec
    ADD CONSTRAINT zamestnanec_zamestnanec_fk FOREIGN KEY ( zamestnanec_id_zam )
        REFERENCES zamestnanec ( id_zam );

ALTER TABLE zavazek
    ADD CONSTRAINT zav_povinosti_fk FOREIGN KEY ( id_pov_povinosti )
        REFERENCES povinosti ( pov_id_povinosti );

CREATE OR REPLACE TRIGGER arc_fkarc__majetkove_pojisteni BEFORE
    INSERT OR UPDATE OF id_poj_pojisteni ON majetkove_pojisteni
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.poj_id_arc
    INTO d
    FROM
        pojistka a
    WHERE
        a.poj_id_pojisteni = :new.id_poj_pojisteni;

    IF ( d IS NULL OR d <> 'm' ) THEN
        raise_application_error(-20223, 'FK MAJ_POJ_POJISTKA_FK in Table MAJETKOVE_POJISTENI violates Arc constraint on Table POJISTKA - discriminator column POJ_ID_arc doesn''t have value ''m'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_pripojisteni BEFORE
    INSERT OR UPDATE OF id_poj_pojisteni ON pripojisteni
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.poj_id_arc
    INTO d
    FROM
        pojistka a
    WHERE
        a.poj_id_pojisteni = :new.id_poj_pojisteni;

    IF ( d IS NULL OR d <> 'p' ) THEN
        raise_application_error(-20223, 'FK PRI_POJISTKA_FK in Table PRIPOJISTENI violates Arc constraint on Table POJISTKA - discriminator column POJ_ID_arc doesn''t have value ''p'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_urazove_pojisteni BEFORE
    INSERT OR UPDATE OF id_poj_pojisteni ON urazove_pojisteni
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.poj_id_arc
    INTO d
    FROM
        pojistka a
    WHERE
        a.poj_id_pojisteni = :new.id_poj_pojisteni;

    IF ( d IS NULL OR d <> 'u' ) THEN
        raise_application_error(-20223, 'FK URA_POJ_POJISTKA_FK in Table URAZOVE_POJISTENI violates Arc constraint on Table POJISTKA - discriminator column POJ_ID_arc doesn''t have value ''u'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_2_pohledavka BEFORE
    INSERT OR UPDATE OF id_pov_povinosti ON pohledavka
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.pov_id_arc
    INTO d
    FROM
        povinosti a
    WHERE
        a.pov_id_povinosti = :new.id_pov_povinosti;

    IF ( d IS NULL OR d <> 'p' ) THEN
        raise_application_error(-20223, 'FK POH_POVINOSTI_FK in Table POHLEDAVKA violates Arc constraint on Table POVINOSTI - discriminator column POV_ID_arc doesn''t have value ''p'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_2_zavazek BEFORE
    INSERT OR UPDATE OF id_pov_povinosti ON zavazek
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.pov_id_arc
    INTO d
    FROM
        povinosti a
    WHERE
        a.pov_id_povinosti = :new.id_pov_povinosti;

    IF ( d IS NULL OR d <> 'z' ) THEN
        raise_application_error(-20223, 'FK ZAV_POVINOSTI_FK in Table ZAVAZEK violates Arc constraint on Table POVINOSTI - discriminator column POV_ID_arc doesn''t have value ''z'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE adr_id_adresa_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adr_id_adresa_trg BEFORE
    INSERT ON adresa
    FOR EACH ROW
    WHEN ( new.id_adresa IS NULL )
BEGIN
    :new.id_adresa := adr_id_adresa_seq.nextval;
END;
/

CREATE SEQUENCE bnk_id_banka_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER bnk_id_banka_trg BEFORE
    INSERT ON banka
    FOR EACH ROW
    WHEN ( new.id_banka IS NULL )
BEGIN
    :new.id_banka := bnk_id_banka_seq.nextval;
END;
/

CREATE SEQUENCE fot_id_fotodokumentace_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER fot_id_fotodokumentace_trg BEFORE
    INSERT ON fotodokumentace
    FOR EACH ROW
    WHEN ( new.id_fotodokumentace IS NULL )
BEGIN
    :new.id_fotodokumentace := fot_id_fotodokumentace_seq.nextval;
END;
/

CREATE SEQUENCE kam_id_kategorie_majetku_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kam_id_kategorie_majetku_trg BEFORE
    INSERT ON kategorie_majetek
    FOR EACH ROW
    WHEN ( new.id_kategorie_majetku IS NULL )
BEGIN
    :new.id_kategorie_majetku := kam_id_kategorie_majetku_seq.nextval;
END;
/

CREATE SEQUENCE kli_id_klient_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kli_id_klient_trg BEFORE
    INSERT ON klient
    FOR EACH ROW
    WHEN ( new.id_klient IS NULL )
BEGIN
    :new.id_klient := kli_id_klient_seq.nextval;
END;
/

CREATE SEQUENCE kon_id_kontakt_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kon_id_kontakt_trg BEFORE
    INSERT ON kontakt
    FOR EACH ROW
    WHEN ( new.id_kontakt IS NULL )
BEGIN
    :new.id_kontakt := kon_id_kontakt_seq.nextval;
END;
/

CREATE SEQUENCE kra_id_kraj_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kra_id_kraj_trg BEFORE
    INSERT ON kraj
    FOR EACH ROW
    WHEN ( new.id_kraj IS NULL )
BEGIN
    :new.id_kraj := kra_id_kraj_seq.nextval;
END;
/

CREATE SEQUENCE per_id_permise_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER per_id_permise_trg BEFORE
    INSERT ON permise
    FOR EACH ROW
    WHEN ( new.id_permise IS NULL )
BEGIN
    :new.id_permise := per_id_permise_seq.nextval;
END;
/

CREATE SEQUENCE pob_id_pobocka_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pob_id_pobocka_trg BEFORE
    INSERT ON pobocka
    FOR EACH ROW
    WHEN ( new.id_pobocka IS NULL )
BEGIN
    :new.id_pobocka := pob_id_pobocka_seq.nextval;
END;
/

CREATE SEQUENCE poh_id_pov_povinosti_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER poh_id_pov_povinosti_trg BEFORE
    INSERT ON pohledavka
    FOR EACH ROW
    WHEN ( new.id_pov_povinosti IS NULL )
BEGIN
    :new.id_pov_povinosti := poh_id_pov_povinosti_seq.nextval;
END;
/

CREATE SEQUENCE poj_poj_id_pojisteni_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER poj_poj_id_pojisteni_trg BEFORE
    INSERT ON pojistka
    FOR EACH ROW
    WHEN ( new.poj_id_pojisteni IS NULL )
BEGIN
    :new.poj_id_pojisteni := poj_poj_id_pojisteni_seq.nextval;
END;
/

CREATE SEQUENCE pov_pov_id_povinosti_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pov_pov_id_povinosti_trg BEFORE
    INSERT ON povinosti
    FOR EACH ROW
    WHEN ( new.pov_id_povinosti IS NULL )
BEGIN
    :new.pov_id_povinosti := pov_pov_id_povinosti_seq.nextval;
END;
/

CREATE SEQUENCE poz_id_pozice_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER poz_id_pozice_trg BEFORE
    INSERT ON pozice
    FOR EACH ROW
    WHEN ( new.id_pozice IS NULL )
BEGIN
    :new.id_pozice := poz_id_pozice_seq.nextval;
END;
/

CREATE SEQUENCE pri_id_poj_pojisteni_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pri_id_poj_pojisteni_trg BEFORE
    INSERT ON pripojisteni
    FOR EACH ROW
    WHEN ( new.id_poj_pojisteni IS NULL )
BEGIN
    :new.id_poj_pojisteni := pri_id_poj_pojisteni_seq.nextval;
END;
/

CREATE SEQUENCE sec_id_secret_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sec_id_secret_trg BEFORE
    INSERT ON secret
    FOR EACH ROW
    WHEN ( new.id_secret IS NULL )
BEGIN
    :new.id_secret := sec_id_secret_seq.nextval;
END;
/

CREATE SEQUENCE ura_id_poj_pojisteni_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ura_id_poj_pojisteni_trg BEFORE
    INSERT ON urazove_pojisteni
    FOR EACH ROW
    WHEN ( new.id_poj_pojisteni IS NULL )
BEGIN
    :new.id_poj_pojisteni := ura_id_poj_pojisteni_seq.nextval;
END;
/

CREATE SEQUENCE zam_id_zam_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zam_id_zam_trg BEFORE
    INSERT ON zamestnanec
    FOR EACH ROW
    WHEN ( new.id_zam IS NULL )
BEGIN
    :new.id_zam := zam_id_zam_seq.nextval;
END;
/

CREATE SEQUENCE zamestnanec_pobocka_id_st_zam_ START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamestnanec_pobocka_id_st_zam_ BEFORE
    INSERT ON zamestnanec_pobocka
    FOR EACH ROW
    WHEN ( new.id_st_zam_pob IS NULL )
BEGIN
    :new.id_st_zam_pob := zamestnanec_pobocka_id_st_zam_.nextval;
END;
/

CREATE SEQUENCE zamestnanec_pojistka_id_st_zam START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamestnanec_pojistka_id_st_zam BEFORE
    INSERT ON zamestnanec_pojistka
    FOR EACH ROW
    WHEN ( new.id_st_zam_poj IS NULL )
BEGIN
    :new.id_st_zam_poj := zamestnanec_pojistka_id_st_zam.nextval;
END;
/

CREATE SEQUENCE zav_id_pov_povinosti_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zav_id_pov_povinosti_trg BEFORE
    INSERT ON zavazek
    FOR EACH ROW
    WHEN ( new.id_pov_povinosti IS NULL )
BEGIN
    :new.id_pov_povinosti := zav_id_pov_povinosti_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            22
-- CREATE INDEX                             2
-- ALTER TABLE                             55
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          25
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         20
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
